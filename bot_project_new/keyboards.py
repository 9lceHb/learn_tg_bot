from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from utils import firsttime_user
from emoji import emojize
from DbFolder.db_file import DBase
dbase = DBase()
(
    STEP_NAME,
    STEP_AGE,
    STEP_EXPERIENCE,
    STEP_LOCATION,
    STEP_UPDATE_CV,
    STEP_PHOTO,
    STEP_SPECIALITY,
    STEP_SPECIALISATION,
    STEP_OTHER,
    STEP_DELETE,
    STEP_SCHEDULE,
    STEP_SALARY,
    STEP_EDUCATION,
    STEP_BACK,
    STEP_CONTACT,
    STEP_CV_END,
    STEP_FILTER_AGE,
    STEP_FILTER_EXPERIENCE,
    STEP_FILTER_LOCATION,
    STEP_FILTER_MAIN,
    STEP_FILTER_PHOTO,
    STEP_FILTER_SPECIALITY,
    STEP_WRITE_SPECIALITY,
    STEP_FILTER_SPECIALISATION,
    STEP_FILTER_SCHEDULE,
    STEP_FILTER_SALARY,
    STEP_FILTER_EDUCATION,
    STEP_SHOW_CV,
    STEP_FILTER_END,
    STEP_INVOICE,
    STEP_PAYMENT_DONE,
    STEP_AFTER_PAYMENT,
    STEP_PRECHECKOUT,
    STEP_PAYMENT_BACK_FILTER,
    STEP_PAYMENT_BACK_AREA,
    STEP_PAYMENTS_END,
    STEP_MANAGE_AREA,
    STEP_PAY_BALANCE,
    STEP_SUPPORT,
    STEP_SAVE_ISSUE,
) = map(chr, range(40))

smile_speciality = emojize(':memo:', use_aliases=True)
smile_specialisation = emojize(':microscope:', use_aliases=True)
smile_education = emojize(':mortar_board:', use_aliases=True)
smile_experience = emojize(':clock12:', use_aliases=True)
smile_shedule = emojize(':date:', use_aliases=True)
smile_salary = emojize(':dollar:', use_aliases=True)
smile_back = emojize(':arrow_left:', use_aliases=True)
smile_yes = emojize(':white_check_mark:', use_aliases=True)
smile_no = emojize(':white_medium_square:', use_aliases=True)
smile_name = emojize(':mens:', use_aliases=True)
smile_age = emojize(':hourglass_flowing_sand:', use_aliases=True)
smile_location = emojize(':earth_africa:', use_aliases=True)
smile_photo = emojize(':camera:', use_aliases=True)
smile_other = emojize(':capital_abcd:', use_aliases=True)
smile_rdy = emojize(':arrow_right:', use_aliases=True)
smile_1 = None  # emojize(':one:', use_aliases=True)
smile_2 = None  # emojize(':two:', use_aliases=True)
smile_3 = None  # emojize(':three:', use_aliases=True)
smile_4 = None  # emojize(':four:', use_aliases=True)
smile_5 = None  # emojize(':five:', use_aliases=True)
smile_pass = emojize(':arrow_right:', use_aliases=True)
smile_worker = emojize(':construction_worker:', use_aliases=True)
smile_worker_2 = 'üë®‚Äçüîß'
smile_write = emojize(':pencil2:', use_aliases=True)
smile_up = emojize(':arrow_up:', use_aliases=True)
smile_card = emojize(':credit_card:', use_aliases=True)
smile_work = emojize(':hospital:', use_aliases=True)
smile_chair = emojize(':seat:', use_aliases=True)
smile_write = emojize(':pencil2:', use_aliases=True)
smile_look = emojize(':page_with_curl:', use_aliases=True)
smile_area = emojize(':house_with_garden:', use_aliases=True)


# handlers_kayboards
def start_keyboard():
    start_buttons = [
        [InlineKeyboardButton(text=f'{smile_work} –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É', callback_data='–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É')],
        [InlineKeyboardButton(text=f'{smile_worker} –ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data='–ù–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')],
        [InlineKeyboardButton(text=f'{smile_area} –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', callback_data='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')],
        [InlineKeyboardButton(text=f'{smile_chair} —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã', callback_data='—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å')],
    ]
    return InlineKeyboardMarkup(start_buttons)


def find_work_keyboard(tg_id):
    if firsttime_user(tg_id, 'cv'):
        text = f'{smile_write} –ü—Ä–∏—Å—Ç—É–ø–∏–º!'
    else:
        text = f'{smile_write} –ú–æ—è –∞–Ω–∫–µ—Ç–∞'
    find_work_buttons = [
        [
            InlineKeyboardButton(text=text, callback_data='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É'),
            # InlineKeyboardButton(text=f'{smile_look} –°–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏', callback_data='–°–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏'),
        ],
    ]
    return InlineKeyboardMarkup(find_work_buttons)


# CV_KEYBOARDS
def cv_main_keyboard(update, context):
    # –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv']['show_cv']:
        text = f'{smile_yes} –£–±—Ä–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∏–∑ –ø–æ–∏—Å–∫–∞'
    else:
        text = f'{smile_no} –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤ –ø–æ–∏—Å–∫'
    cv_main_buttons = [
        [
            InlineKeyboardButton(text=f'{smile_write} –ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data=STEP_OTHER),
        ],
        [
            InlineKeyboardButton(text=text, callback_data=STEP_DELETE),
        ],
        [
            InlineKeyboardButton(text=f'{smile_rdy} –ì–æ—Ç–æ–≤–æ', callback_data=STEP_CV_END),
        ]
    ]
    return InlineKeyboardMarkup(cv_main_buttons)


def cv_other_keyboard(update, context):
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    cv_other_buttons = [
        [
            InlineKeyboardButton(text=f'{smile_speciality} –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', callback_data=STEP_SPECIALITY),
        ],
        [
            InlineKeyboardButton(text=f'{smile_specialisation} –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è', callback_data=STEP_SPECIALISATION),
        ],
        [
            InlineKeyboardButton(text=f'{smile_education} –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', callback_data=STEP_EDUCATION),
            InlineKeyboardButton(text=f'{smile_experience} –û–ø—ã—Ç', callback_data=STEP_EXPERIENCE),
        ],
        [
            InlineKeyboardButton(text=f'{smile_name} –§–ò–û', callback_data=STEP_NAME),
            InlineKeyboardButton(text=f'{smile_age} –í–æ–∑—Ä–∞—Å—Ç', callback_data=STEP_AGE),
        ],
        [
            InlineKeyboardButton(text=f'{smile_location} –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', callback_data=STEP_LOCATION),
            InlineKeyboardButton(text=f'{smile_photo} –§–æ—Ç–æ', callback_data=STEP_PHOTO),
        ],
        [
            InlineKeyboardButton(text=f'{smile_shedule} –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', callback_data=STEP_SCHEDULE),
            InlineKeyboardButton(text=f'{smile_salary} –ó–∞—Ä–ø–ª–∞—Ç–∞', callback_data=STEP_SALARY),
        ],
        [
            InlineKeyboardButton(text=f'{smile_back} –ù–∞–∑–∞–¥', callback_data=STEP_BACK),
            InlineKeyboardButton(text=f'{smile_rdy} –ì–æ—Ç–æ–≤–æ', callback_data=STEP_CV_END),
        ]
    ]
    if user['cv']['speciality'] != '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥':
        cv_other_buttons.remove([InlineKeyboardButton(
            text=f'{smile_specialisation} –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
            callback_data=STEP_SPECIALISATION
        )])
    else:
        cv_other_buttons[2] = [InlineKeyboardButton(text=f'{smile_experience} –û–ø—ã—Ç', callback_data=STEP_EXPERIENCE)]
    return InlineKeyboardMarkup(cv_other_buttons)


def speciality_keyboard():
    speciality_buttons = [
        [InlineKeyboardButton(text='–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', callback_data='–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥')],
        [InlineKeyboardButton(text='–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', callback_data='–ú–µ–¥—Å–µ—Å—Ç—Ä–∞')],
        [InlineKeyboardButton(text='–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç', callback_data='–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')]
    ]
    return InlineKeyboardMarkup(speciality_buttons)


def specialisation_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    specialisation_buttons = []
    specialisation_list = ['–¢–µ—Ä–∞–ø–µ–≤—Ç', '–û—Ä—Ç–æ–ø–µ–¥', '–•–∏—Ä—É—Ä–≥', '–û—Ä—Ç–æ–¥–æ–Ω—Ç', '–î–µ—Ç—Å–∫–∏–π –≤—Ä–∞—á']
    if user['cv']['specialisation']:
        user_specialis_list = user['cv'].get('specialisation')
        for spec in specialisation_list:
            if spec in user_specialis_list:
                text = f'{smile_yes} {spec}'
            else:
                text = f'{smile_no} {spec}'
            specialisation_buttons.append([InlineKeyboardButton(text=text, callback_data=spec)])
    else:
        for spec in specialisation_list:
            text = f'{smile_no} {spec}'
            specialisation_buttons.append([InlineKeyboardButton(text=text, callback_data=spec)])
    if firsttime_user(tg_id, 'cv'):
        text_back = f'{smile_back} –ù–∞–∑–∞–¥'
        specialisation_buttons.append([InlineKeyboardButton(text=text_back, callback_data='back_cv')])
        text_rdy = f'{smile_rdy} –î–∞–ª–µ–µ'
    else:
        text_rdy = f'{smile_rdy} –ì–æ—Ç–æ–≤–æ'
    specialisation_buttons.append([InlineKeyboardButton(text=text_rdy, callback_data='end_specialisation')])
    return InlineKeyboardMarkup(specialisation_buttons)


def schedule_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv']['speciality'] == '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞':
        schedule_buttons = [
            [InlineKeyboardButton(text='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫', callback_data='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫')],
            [InlineKeyboardButton(text='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å')],
            [InlineKeyboardButton(text='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥', callback_data='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥')],
        ]
    elif user['cv']['speciality'] == '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç':
        schedule_buttons = [
            [InlineKeyboardButton(text='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫', callback_data='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫')],
            [InlineKeyboardButton(text='–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ', callback_data='–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ')],
            [InlineKeyboardButton(text='–¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞', callback_data='–¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞')],
            [InlineKeyboardButton(text='–¢–æ–ª—å–∫–æ –≤—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞', callback_data='–¢–æ–ª—å–∫–æ –≤—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞')],
            [InlineKeyboardButton(text='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥', callback_data='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥')],
        ]
    else:
        schedule_buttons = [
            [InlineKeyboardButton(text='–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å')],
            [InlineKeyboardButton(text='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å')],
        ]
    if firsttime_user(tg_id, 'cv'):
        text_back = f'{smile_back} –ù–∞–∑–∞–¥'
        schedule_buttons.append([InlineKeyboardButton(text=text_back, callback_data='back_cv')])
    return InlineKeyboardMarkup(schedule_buttons)


def salary_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv']['speciality'] != '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥':
        salary_buttons = [
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 1000 —Ä—É–±.', callback_data='–æ—Ç 1000 —Ä—É–±./0')],
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 2000 —Ä—É–±.', callback_data='–æ—Ç 2000 —Ä—É–±./1')],
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 3000 —Ä—É–±.', callback_data='–æ—Ç 3000 —Ä—É–±./2')],
        ]
    else:
        salary_buttons = [
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 15000 —Ä—É–±.', callback_data='–æ—Ç 15000 —Ä—É–±./0')],
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 40000 —Ä—É–±.', callback_data='–æ—Ç 40000 —Ä—É–±./1')],
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 80000 —Ä—É–±.', callback_data='–æ—Ç 80000 —Ä—É–±./2')],
        ]
    if firsttime_user(tg_id, 'cv'):
        text_back = f'{smile_back} –ù–∞–∑–∞–¥'
        salary_buttons.append([InlineKeyboardButton(text=text_back, callback_data='back_cv')])
    return InlineKeyboardMarkup(salary_buttons)


def education_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv']['speciality'] == '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞':
        education_buttons = [
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ/0')],
            [InlineKeyboardButton(
                text='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ, –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ',
                callback_data='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥., –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ/1'
            )],
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ/2')],
        ]
    else:
        education_buttons = [
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ/0')],
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ/1')],
            [InlineKeyboardButton(text='–≤—ã—Å—à–µ–µ –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ', callback_data='–≤—ã—Å—à–µ–µ –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ/2')],
            [InlineKeyboardButton(text='–≤—ã—Å—à–µ–µ', callback_data='–≤—ã—Å—à–µ–µ/3')],
        ]
    if firsttime_user(tg_id, 'cv'):
        text_back = f'{smile_back} –ù–∞–∑–∞–¥'
        education_buttons.append([InlineKeyboardButton(text=text_back, callback_data='back_cv')])
    return InlineKeyboardMarkup(education_buttons)


def experience_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv']['speciality'] == '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞':
        experience_buttons = [
            [InlineKeyboardButton(text='–±–µ–∑ –æ–ø—ã—Ç–∞', callback_data='–±–µ–∑ –æ–ø—ã—Ç–∞/0')],
            [InlineKeyboardButton(
                text='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –º–µ–¥—É—á—Ä–µ–∂–¥–µ–Ω–∏–∏',
                callback_data='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –º–µ–¥—É—á—Ä–µ–∂–¥–µ–Ω–∏–∏/1'
            )],
            [InlineKeyboardButton(
                text='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏',
                callback_data='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏/2'
            )],
        ]
    elif user['cv']['speciality'] == '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç':
        experience_buttons = [
            [InlineKeyboardButton(text='–±–µ–∑ –æ–ø—ã—Ç–∞', callback_data='–±–µ–∑ –æ–ø—ã—Ç–∞/0')],
            [InlineKeyboardButton(
                text='–≤—ã–ø—É—Å–∫–Ω–∏–∫ –∫—É—Ä—Å–∞ "–ó–≤–µ–∑–¥–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"',
                callback_data="–ó–≤–µ–∑–¥–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç/1"
            )],
            [InlineKeyboardButton(text='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã', callback_data='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã/2')],
        ]
    else:
        experience_buttons = [
            [InlineKeyboardButton(text='–±–µ–∑ –æ–ø—ã—Ç–∞', callback_data='–±–µ–∑ –æ–ø—ã—Ç–∞/0')],
            [InlineKeyboardButton(text='–æ—Ç 1 –≥–æ–¥–∞', callback_data='–æ—Ç 1 –≥–æ–¥–∞/1')],
            [InlineKeyboardButton(text='–æ—Ç 3 –ª–µ—Ç', callback_data='–æ—Ç 3 –ª–µ—Ç/2')],
            [InlineKeyboardButton(text='–æ—Ç 5 –ª–µ—Ç', callback_data='–æ—Ç 5 –ª–µ—Ç/3')],
        ]
    if firsttime_user(tg_id, 'cv'):
        text_back = f'{smile_back} –ù–∞–∑–∞–¥'
        experience_buttons.append([InlineKeyboardButton(text=text_back, callback_data='back_cv')])
    return InlineKeyboardMarkup(experience_buttons)


def photo_pass_keyboard(tg_id):
    text = f'{smile_pass} –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–¥–Ω–µ–µ)'
    text_back = f'{smile_back} –ù–∞–∑–∞–¥'
    photo_button = [
        [InlineKeyboardButton(text=text, callback_data='–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å_—Ñ–æ—Ç–æ')],
    ]
    if firsttime_user(tg_id, 'cv'):
        text_back = f'{smile_back} –ù–∞–∑–∞–¥'
        photo_button.append([InlineKeyboardButton(text=text_back, callback_data='back_cv')])
    return InlineKeyboardMarkup(photo_button)


def back_keyboard():
    text_back = f'{smile_back} –ù–∞–∑–∞–¥'
    back_button = [
        [InlineKeyboardButton(text=text_back, callback_data='back_cv')]
    ]
    return InlineKeyboardMarkup(back_button)


def contact_keyboard():
    button = KeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact=True)
    return ReplyKeyboardMarkup([[button]], one_time_keyboard=True, resize_keyboard=True)


# Filter_keyboards
def filter_main_keyboard(update, context):
    # –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∫–µ—Ç—ã
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    filter_main_buttons = [
        [
            InlineKeyboardButton(text=f'{smile_speciality} –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', callback_data=STEP_FILTER_SPECIALITY),
        ],
        [
            InlineKeyboardButton(text=f'{smile_age} –í–æ–∑—Ä–∞—Å—Ç', callback_data=STEP_FILTER_AGE),
            InlineKeyboardButton(text=f'{smile_experience} –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', callback_data=STEP_FILTER_EXPERIENCE),
        ],
        [
            InlineKeyboardButton(text=f'{smile_location} –õ–æ–∫–∞—Ü–∏—è', callback_data=STEP_FILTER_LOCATION),
            InlineKeyboardButton(text=f'{smile_photo} –ù–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ', callback_data=STEP_FILTER_PHOTO),
        ],
        [
            InlineKeyboardButton(text=f'{smile_shedule} –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã', callback_data=STEP_FILTER_SCHEDULE),
            InlineKeyboardButton(text=f'{smile_salary} –ó–∞—Ä–ª–∞—Ç–∞', callback_data=STEP_FILTER_SALARY),
        ],
        [
            InlineKeyboardButton(text=f'{smile_rdy} –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã', callback_data='–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã'),
        ],
        [
            InlineKeyboardButton(text=f'{smile_rdy} –ì–æ—Ç–æ–≤–æ', callback_data=STEP_FILTER_END),
        ]
    ]
    if user['filter']['speciality'] == '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥':
        filter_main_buttons[0].insert(1, InlineKeyboardButton(
            text=f'{smile_specialisation} –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
            callback_data=STEP_FILTER_SPECIALISATION
        ))
    else:
        filter_main_buttons[0].insert(1, InlineKeyboardButton(
            text=f'{smile_education} –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            callback_data=STEP_FILTER_EDUCATION
        ))
    return InlineKeyboardMarkup(filter_main_buttons)


def filter_speciality_keyboard():
    filter_speciality_buttons = [
        [InlineKeyboardButton(text='–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥', callback_data='–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥')],
        [InlineKeyboardButton(text='–ú–µ–¥—Å–µ—Å—Ç—Ä–∞', callback_data='–ú–µ–¥—Å–µ—Å—Ç—Ä–∞')],
        [InlineKeyboardButton(text='–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç', callback_data='–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç')]
    ]
    return InlineKeyboardMarkup(filter_speciality_buttons)


def filter_invite_keyboard():
    filter_invite_buttons = [
        [InlineKeyboardButton(text=f'{smile_rdy} –ü—Ä–∏—Å—Ç—É–ø–∏–º!', callback_data='–ü—Ä–∏—Å—Ç—É–ø–∏–º')],
    ]
    return InlineKeyboardMarkup(filter_invite_buttons)


def filter_specialisation_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    text_rdy = f'{smile_rdy} –ì–æ—Ç–æ–≤–æ'
    filter_specialisation_buttons = []
    specialisation_list = ['–¢–µ—Ä–∞–ø–µ–≤—Ç', '–û—Ä—Ç–æ–ø–µ–¥', '–•–∏—Ä—É—Ä–≥', '–û—Ä—Ç–æ–¥–æ–Ω—Ç', '–î–µ—Ç—Å–∫–∏–π –≤—Ä–∞—á']
    if user['filter']['specialisation']:
        user_specialis_list = user['filter'].get('specialisation')
        for spec in specialisation_list:
            if spec in user_specialis_list:
                text = f'{smile_yes} {spec}'
            else:
                text = f'{smile_no} {spec}'
            filter_specialisation_buttons.append([InlineKeyboardButton(text=text, callback_data=spec)])
    else:
        for spec in specialisation_list:
            text = f'{smile_no} {spec}'
            filter_specialisation_buttons.append([InlineKeyboardButton(text=text, callback_data=spec)])
    filter_specialisation_buttons.append([InlineKeyboardButton(text=text_rdy, callback_data='end_specialisation_f')])
    return InlineKeyboardMarkup(filter_specialisation_buttons)


def filter_schedule_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['filter']['speciality'] == '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞':
        filter_schedule_buttons = [
            [InlineKeyboardButton(text='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫', callback_data='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫')],
            [InlineKeyboardButton(text='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å')],
            [InlineKeyboardButton(text='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥', callback_data='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥')],
        ]
    elif user['filter']['speciality'] == '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç':
        filter_schedule_buttons = [
            [InlineKeyboardButton(text='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫', callback_data='–õ—é–±–æ–π –≥—Ä–∞—Ñ–∏–∫')],
            [InlineKeyboardButton(text='–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ', callback_data='–¢–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–Ω—ã–µ')],
            [InlineKeyboardButton(text='–¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞', callback_data='–¢–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å–º–µ–Ω–∞')],
            [InlineKeyboardButton(text='–¢–æ–ª—å–∫–æ –≤—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞', callback_data='–¢–æ–ª—å–∫–æ –≤—Ç–æ—Ä–∞—è —Å–º–µ–Ω–∞')],
            [InlineKeyboardButton(text='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥', callback_data='–†–∞–∑–æ–≤—ã–π –≤—ã—Ö–æ–¥')],
        ]
    else:
        filter_schedule_buttons = [
            [InlineKeyboardButton(text='–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å')],
            [InlineKeyboardButton(text='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å', callback_data='–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å')],
        ]
    return InlineKeyboardMarkup(filter_schedule_buttons)


def filter_salary_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['filter']['speciality'] != '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥':
        filter_salary_buttons = [
            [InlineKeyboardButton(text=f'{smile_salary} –¥–æ 2000', callback_data='–¥–æ 2000 —Ä—É–±./0')],
            [InlineKeyboardButton(text=f'{smile_salary} –¥–æ 3000', callback_data='–¥–æ 3000 —Ä—É–±./1')],
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 3000', callback_data='–æ—Ç 3000 —Ä—É–±./2')],
        ]
    else:
        filter_salary_buttons = [
            [InlineKeyboardButton(text=f'{smile_salary} –¥–æ 40000', callback_data='–¥–æ 40000 —Ä—É–±./0')],
            [InlineKeyboardButton(text=f'{smile_salary} –¥–æ 80000', callback_data='–¥–æ 80000 —Ä—É–±./1')],
            [InlineKeyboardButton(text=f'{smile_salary} –æ—Ç 80000', callback_data='–æ—Ç 80000 —Ä—É–±./2')],
        ]
    return InlineKeyboardMarkup(filter_salary_buttons)


def filter_education_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['filter']['speciality'] == '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞':
        filter_education_buttons = [
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ/0')],
            [InlineKeyboardButton(
                text='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ, –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ',
                callback_data='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥., –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ/1'
            )],
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ/2')],
        ]
    else:
        filter_education_buttons = [
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ/0')],
            [InlineKeyboardButton(text='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ', callback_data='—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ/1')],
            [InlineKeyboardButton(text='–≤—ã—Å—à–µ–µ –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ', callback_data='–≤—ã—Å—à–µ–µ –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ/2')],
            [InlineKeyboardButton(text='–≤—ã—Å—à–µ–µ', callback_data='–≤—ã—Å—à–µ–µ/3')],
        ]
    return InlineKeyboardMarkup(filter_education_buttons)


def filter_experience_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['filter']['speciality'] == '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞':
        filter_experience_buttons = [
            [InlineKeyboardButton(text='–±–µ–∑ –æ–ø—ã—Ç–∞', callback_data='–±–µ–∑ –æ–ø—ã—Ç–∞/0')],
            [InlineKeyboardButton(
                text='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –º–µ–¥—É—á—Ä–µ–∂–¥–µ–Ω–∏–∏',
                callback_data='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –º–µ–¥—É—á—Ä–µ–∂–¥–µ–Ω–∏–∏/1'
            )],
            [InlineKeyboardButton(
                text='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏',
                callback_data='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏/2'
            )],
        ]
    elif user['filter']['speciality'] == '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç':
        filter_experience_buttons = [
            [InlineKeyboardButton(text='–±–µ–∑ –æ–ø—ã—Ç–∞', callback_data='–±–µ–∑ –æ–ø—ã—Ç–∞/0')],
            [InlineKeyboardButton(
                text='–≤—ã–ø—É—Å–∫–Ω–∏–∫ –∫—É—Ä—Å–∞ "–ó–≤–µ–∑–¥–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"',
                callback_data="–ó–≤–µ–∑–¥–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç/1"
            )],
            [InlineKeyboardButton(text='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã', callback_data='—Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã/2')],
        ]
    else:
        filter_experience_buttons = [
            [InlineKeyboardButton(text='–±–µ–∑ –æ–ø—ã—Ç–∞', callback_data='–±–µ–∑ –æ–ø—ã—Ç–∞/0')],
            [InlineKeyboardButton(text='–æ—Ç 1 –≥–æ–¥–∞', callback_data='–æ—Ç 1 –≥–æ–¥–∞/1')],
            [InlineKeyboardButton(text='–æ—Ç 3 –ª–µ—Ç', callback_data='–æ—Ç 3 –ª–µ—Ç/2')],
            [InlineKeyboardButton(text='–æ—Ç 5 –ª–µ—Ç', callback_data='–æ—Ç 5 –ª–µ—Ç/3')],
        ]
    return InlineKeyboardMarkup(filter_experience_buttons)


def filter_photo_keyboard(tg_id):
    filter_photo_buttons = [
        [
            InlineKeyboardButton(text='–§–æ—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', callback_data='–§–æ—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ')
        ],
        [
            InlineKeyboardButton(text='–§–æ—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', callback_data='–§–æ—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
        ],
    ]
    return InlineKeyboardMarkup(filter_photo_buttons)


def show_cv_keyboard(tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    show_cv_buttons = [
        [
            InlineKeyboardButton(text=f'{smile_back} –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data='show_cv_back'),
            InlineKeyboardButton(text=f'{smile_rdy} –°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data='show_cv_next')
        ],
        [
            InlineKeyboardButton(text=f'{smile_up} –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∞–Ω–∫–µ—Ç', callback_data='show_cv_end')
        ],
        [
            InlineKeyboardButton(text=f'{smile_salary} –û–ø–ª–∞—Ç–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='pay_cv')
        ],
        [
            InlineKeyboardButton(text=f'{smile_card} –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='pay_balance_filter')
        ],
    ]
    tg_id_list = user['filter']['show_cv_tg_id']['tg_id_list']
    showed_tg_id = user['filter']['show_cv_tg_id']['showed_tg_id']
    if len(tg_id_list) == 0:
        show_cv_buttons.pop(0)
        show_cv_buttons.pop(-1)
        show_cv_buttons.pop(-1)
        return InlineKeyboardMarkup(show_cv_buttons)
    if showed_tg_id in user['paid_cv']:
        show_cv_buttons.pop(-2)
    if len(tg_id_list) == 1:
        show_cv_buttons.pop(0)
        return InlineKeyboardMarkup(show_cv_buttons)
    if showed_tg_id == tg_id_list[0]:
        show_cv_buttons[0].pop(0)
    elif showed_tg_id == tg_id_list[-1]:
        show_cv_buttons[0].pop(-1)
    return InlineKeyboardMarkup(show_cv_buttons)


# Payments_keyboards
def choose_amount_keyboard(payment_from):
    choose_amount_buttons = [
        [InlineKeyboardButton(text='100 —Ä—É–±–ª–µ–π', callback_data='100 —Ä—É–±–ª–µ–π')],
        [InlineKeyboardButton(text='300 —Ä—É–±–ª–µ–π', callback_data='300 —Ä—É–±–ª–µ–π')],
        [InlineKeyboardButton(text='500 —Ä—É–±–ª–µ–π', callback_data='500 —Ä—É–±–ª–µ–π')],
    ]
    if payment_from == 'filter':
        choose_amount_buttons.append([
            InlineKeyboardButton(text=f'{smile_back} –ù–∞–∑–∞–¥', callback_data='payment_back_filter')
        ])
    elif payment_from == 'area':
        choose_amount_buttons.append([
            InlineKeyboardButton(text=f'{smile_back} –ù–∞–∑–∞–¥', callback_data='payment_back_area')
        ])
    return InlineKeyboardMarkup(choose_amount_buttons)


def back_payment_keyboard(amount):
    text_back = f'{smile_back} –ù–∞–∑–∞–¥'
    back_button = [
        [InlineKeyboardButton(text=f'–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π', pay=True)],
        [InlineKeyboardButton(text=text_back, callback_data='back_payment')]
    ]
    return InlineKeyboardMarkup(back_button)


def after_success_keyboard(payment_from):
    after_success_button = [
        [InlineKeyboardButton(text=f'{smile_card} –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='pay_balance')],
    ]
    if payment_from == 'filter':
        after_success_button.append([
            InlineKeyboardButton(text=f'{smile_rdy} –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç', callback_data='success_to_filter')
        ])
    elif payment_from == 'area':
        after_success_button.append([
            InlineKeyboardButton(text=f'{smile_back} –ù–∞–∑–∞–¥', callback_data='success_to_area')
        ])
    return InlineKeyboardMarkup(after_success_button)


def pay_cv_fail_keyboard():
    pay_cv_fail_button = [
        [InlineKeyboardButton(text=f'{smile_card} –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='pay_balance_filter')],
        [InlineKeyboardButton(text=f'{smile_back} –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç', callback_data='–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã')]
    ]
    return InlineKeyboardMarkup(pay_cv_fail_button)


# Personal area keybooards

def personal_area_keyboard():
    personal_area_buttons = [
        [InlineKeyboardButton(text=f'{smile_card} –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='pay_balance_area')],
        [InlineKeyboardButton(text=f'{smile_worker_2} –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', callback_data='STEP_SUPPORT')],
        [InlineKeyboardButton(text=f'{smile_back} –ù–∞–∑–∞–¥', callback_data='back_menu')]
    ]
    return InlineKeyboardMarkup(personal_area_buttons)

from typing import Text

import os
from telegram import ParseMode
from bot_project_new.utils import (
    is_human_and_sfw,
    update_user_location,
    make_station_numbers_set,
    make_photo_path,
    print_location,
    firsttime_user,
    print_specialisation,
)
from DbFolder.db_file import DBase
from handlers import start_keyboard
from telegram.ext import (
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackQueryHandler,
    CommandHandler,
)
from handlers import start

from cv_keyboards import (
    cv_main_keyboard,
    cv_other_keyboard,
    speciality_keyboard,
    specialisation_keyboard,
    schedule_keyboard,
    salary_keyboard,
    education_keyboard,
    experience_keyboard,
    photo_pass_keyboard,
    back_keyboard,
    STEP_NAME,
    STEP_AGE,
    STEP_EXPERIENCE,
    STEP_LOCATION,
    STEP_UPDATE_CV,
    STEP_PHOTO,
    STEP_SPECIALITY,
    STEP_SPECIALISATION,
    STEP_OTHER,
    STEP_DELETE,
    STEP_SCHEDULE,
    STEP_SALARY,
    STEP_EDUCATION,
    STEP_BACK,
    END
)


dbase = DBase()

def print_cv_info(update, context, markup, callback=True):
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if firsttime_user(update.effective_user.id, 'cv'):
        dbase.db_client.users.update_one({'_id': user['_id']}, {'$set': {'cv.first_time': False}})
        firsttime_text = '''
–¢–µ–ø–µ—Ä—å –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –≤–∏–¥–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–∫–æ—Ä–æ –í–∞–º –ø–æ–∑–≤–æ–Ω—è—Ç! ü•≥
–ê –í—ã —Ç–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –º–æ–∂–µ—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.

–ï—Å–ª–∏ –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–± –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º, –Ω–∞–∂–º–∏—Ç–µ <b>¬´—É–±—Ä–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∏–∑ –ø–æ–∏—Å–∫–∞¬ª</b>.
'''
    else:
        firsttime_text = ''
    if user['cv']['speciality'] == '–í—Ä–∞—á':
        specialisation_text = f'''\n<b>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:</b> {print_specialisation(tg_id, 'cv')}'''
        education_text = ''
    else:
        specialisation_text = ''
        education_text = (
            f'''\n<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> {user['cv']['education']
            if user['cv'].get('education')
            else '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}'''
        )
    text = f'''
–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –í–∞—à—É –∞–Ω–∫–µ—Ç—É! üòå
–í —Ç–∞–∫–æ–º –≤–∏–¥–µ –µ–µ —É–≤–∏–¥–∏—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å.

<b>–§–ò–û:</b> {user['cv']['name']
        if user['cv'].get('name')
        else '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user['cv']['age']
        if user['cv'].get('age')
        else '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}{education_text}
<b>–û–ø—ã—Ç:</b> {user['cv']['experience']
        if user['cv'].get('experience')
        else '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
<b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:</b> {user['cv']['speciality']
        if user['cv'].get('speciality')
        else '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}{specialisation_text}
<b>–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b> {user['cv']['schedule']
        if user['cv'].get('schedule')
        else '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞:</b> {user['cv']['salary']
        if user['cv'].get('salary')
        else '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
<b>–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:</b>\n{print_location(tg_id, 'cv')}
<b>–§–æ—Ç–æ:</b> {'–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞–∂–º–∏—Ç–µ /photo'
        if user['cv'].get('photo')
        else '–§–æ—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–æ—Å—å'}

<b>–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã:</b> {'–ê–Ω–∫–µ—Ç–∞ –≤–∏–¥–Ω–∞ –≤ –ø–æ–∏—Å–∫–µ'
          if user['cv']['show_cv']
          else '–ê–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–æ–∏—Å–∫–∞'}
{firsttime_text}
'''
    reply_markup = markup
    if callback:
        update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    else:
        update.message.reply_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)


input_patterns = (
    f'^{STEP_AGE}$|'
    f'^{STEP_LOCATION}$|'
    f'^{STEP_NAME}$|'
    f'^{STEP_SPECIALITY}$|'
    f'^{STEP_SPECIALISATION}$|'
    f'^{STEP_SCHEDULE}$|'
    f'^{STEP_SALARY}$|'
    f'^{STEP_EXPERIENCE}$|'
    f'^{STEP_EDUCATION}$|'
    f'^{STEP_PHOTO}$'
)

def get_step_text(key, tg_id):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if key == STEP_NAME:
        text = f'''
{show_step_num(tg_id, key)}
–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ <b>–∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ –∏ —Ñ–∞–º–∏–ª–∏—é</b>.
<b>–ü—Ä–∏–º–µ—Ä:</b> "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á –ò–≤–∞–Ω–æ–≤".
'''
        keyboard = None
    elif key == STEP_AGE:
        text = f'''
{show_step_num(tg_id, key)}
–°–∫–æ–ª—å–∫–æ –í–∞–º <b>–ª–µ—Ç</b>?
'''
        keyboard = None
    elif key == STEP_LOCATION:
        text = f'''
{show_step_num(tg_id, key)}
<b>–ì–¥–µ —É–¥–æ–±–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å?</b> (–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ, –ª–∏–Ω–∏–∏ –º–µ—Ç—Ä–æ, —Ä–∞–π–æ–Ω—ã, –æ–∫—Ä—É–≥–∞).
<b>–ü—Ä–∏–º–µ—Ä:</b> "–†–µ—á–Ω–æ–π –≤–æ–∫–∑–∞–ª, –°–ê–û".
'''
        keyboard = None
    elif key == STEP_SPECIALITY:
        text = f'''
{show_step_num(tg_id, key)}
–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É <b>—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>.
'''
        keyboard = speciality_keyboard()
    elif key == STEP_SPECIALISATION:
        text = f'''
{show_step_num(tg_id, key)}
–í—ã–±–µ—Ä–∏—Ç–µ <b>—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é</b>:
(–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤)
<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä:</b> {print_specialisation(tg_id, 'cv')}
'''
        keyboard = specialisation_keyboard(tg_id)
    elif key == STEP_SCHEDULE:
        text = f'''
{show_step_num(tg_id, key)}
–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π <b>–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã</b>.
'''
        keyboard = schedule_keyboard(tg_id)
    elif key == STEP_SALARY:
        if user['cv']['speciality'] != '–í—Ä–∞—á':
            text = f'''
{show_step_num(tg_id, key)}
–í—ã–±–µ—Ä–∏—Ç–µ <b>–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É</b> –∑–∞ —Å–º–µ–Ω—É(–ø–æ–ª–¥–Ω—è, 6 - 8 —á–∞—Å–æ–≤).
'''
        else:
            text = f'''
{show_step_num(tg_id, key)}
–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é <b>–∑–∞—Ä–∞–±–æ—Ç–Ω—É—é –ø–ª–∞—Ç—É</b> –∑–∞ –º–µ—Å—è—Ü.
'''
        keyboard = salary_keyboard(tg_id)
    elif key == STEP_EDUCATION:
        text = f'''
{show_step_num(tg_id, key)}
–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à–µ <b>–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</b>.
'''
        keyboard = education_keyboard(tg_id)
    elif key == STEP_EXPERIENCE:
        text = f'''
{show_step_num(tg_id, key)}
–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à <b>–æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</b>.
'''
        keyboard = experience_keyboard(tg_id)
    elif key == STEP_PHOTO:
        text = f'''
{show_step_num(tg_id, key)}
–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –í–∞—à–µ <b>—Ñ–æ—Ç–æ</b>.
–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É (—ç–º–æ–¥–∂–∏ —Å–∫—Ä–µ–ø–∫–∏) –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É.
–≠—Ç–æ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Å–∏–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç –í–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É :)
'''
        keyboard = None
    else:
        text = '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã'
        keyboard = None
    return text, keyboard


def show_step_num(tg_id, key):
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if firsttime_user(tg_id, 'cv'):
        max_step = 10
        if key == STEP_SPECIALITY:
            current_step_num = 1
            text_prev_step = ''
        elif key == STEP_SPECIALISATION:
            current_step_num = 2
            text_prev_step = f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {user['cv']['speciality']}"
        elif key == STEP_SCHEDULE:
            current_step_num = 3
            if user['cv']['speciality'] == '–í—Ä–∞—á':
                text_prev_step = f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {print_specialisation(tg_id, 'cv')}"
            else:
                text_prev_step = f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {user['cv']['speciality']}"
        elif key == STEP_LOCATION:
            current_step_num = 4
            text_prev_step = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –í–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫: {user['cv']['schedule']}"
        elif key == STEP_SALARY:
            current_step_num = 5
            text_prev_step = f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:\n{print_location(tg_id, 'cv')}"
        elif key == STEP_NAME:
            current_step_num = 6
            text_prev_step = f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –í–∞–º–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {user['cv']['salary']}"
        elif key == STEP_AGE:
            current_step_num = 7
            text_prev_step = f"–í–≤–µ–¥–µ–Ω–Ω—ã–µ –í–∞–º–∏ –§–ò–û: {user['cv']['name']}"
        elif key == STEP_EDUCATION:
            current_step_num = 8
            text_prev_step = f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –í–∞–º–∏ –≤–æ–∑—Ä–∞—Å—Ç: {user['cv']['age']}"
        elif key == STEP_EXPERIENCE:
            current_step_num = 9
            if user['cv']['speciality'] == '–í—Ä–∞—á':
                text_prev_step = f"–í–≤–µ–¥–µ–Ω–Ω—ã–µ –í–∞–º–∏ –§–ò–û: {user['cv']['name']}"
            else:
                text_prev_step = f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –í–∞–º–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user['cv']['education']}"
        else:
            current_step_num = 10
            text_prev_step = f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –æ–ø—ã—Ç: {user['cv']['experience']}"
        text = f'''
<b>–®–∞–≥:</b> {current_step_num} –∏–∑ {max_step}
{text_prev_step}
'''
    else:
        return ''
    return text


def manage_choosen_button(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    context.user_data['CURRENT_FEATURE'] = update.callback_query.data
    user_data_key = context.user_data['CURRENT_FEATURE']
    text = get_step_text(user_data_key, tg_id)[0]
    reply_markup = get_step_text(user_data_key, tg_id)[1]
    update.callback_query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    return user_data_key


def cv_move_other(update, context):
    tg_id = update.effective_user.id
    update.callback_query.answer()
    print_cv_info(update, context, cv_other_keyboard(update, context))
    dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
    return STEP_UPDATE_CV


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
def cv_start(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    if firsttime_user(update.effective_user.id, 'cv'):
        text = get_step_text(STEP_SPECIALITY, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=speciality_keyboard(),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_SPECIALITY')
        return STEP_SPECIALITY
    else:
        print_cv_info(update, context, cv_main_keyboard(update, context))
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        return STEP_UPDATE_CV

def not_show_cv(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv']['show_cv']:
        dbase.save_cv(tg_id, 'show_cv', False)
    else:
        dbase.save_cv(tg_id, 'show_cv', True)
    print_cv_info(update, context, cv_main_keyboard(update, context))
    dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
    return STEP_UPDATE_CV


def choose_speciality(update, context):
    update.callback_query.answer()
    user_speciality = update.callback_query.data
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv'].get('speciality') != user_speciality:
        dbase.db_client.users.update_one({'_id': user['_id']}, {'$set': {'cv.first_time': True}})
        dbase.clear_cv(tg_id)
    dbase.save_cv(tg_id, 'speciality', user_speciality)
    if firsttime_user(tg_id, 'cv'):
        if user_speciality == '–í—Ä–∞—á':
            text = get_step_text(STEP_SPECIALISATION, tg_id)[0]
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=specialisation_keyboard(tg_id),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_SPECIALISATION')
            return STEP_SPECIALISATION
        else:
            text = get_step_text(STEP_SCHEDULE, tg_id)[0]
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=schedule_keyboard(tg_id),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_SCHEDULE')
            return STEP_SCHEDULE
    else:
        print_cv_info(update, context, cv_other_keyboard(update, context))
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        return STEP_UPDATE_CV


def choose_specialisation(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    if update.callback_query.data == 'back_cv':
        text = get_step_text(STEP_SPECIALITY, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=speciality_keyboard(),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_SPECIALITY')
        return STEP_SPECIALITY
    elif update.callback_query.data == 'end_specialisation':
        if firsttime_user(tg_id, 'cv'):
            text = get_step_text(STEP_SCHEDULE, tg_id)[0]
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=schedule_keyboard(tg_id),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_SCHEDULE')
            return STEP_SCHEDULE
        else:
            print_cv_info(update, context, cv_other_keyboard(update, context))
            dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
            return STEP_UPDATE_CV
    else:
        user_specialisation = update.callback_query.data
        dbase.update_specialisation(tg_id, user_specialisation, 'cv')
        user = dbase.db_client.users.find_one({'tg_id': tg_id})
        text = get_step_text(STEP_SPECIALISATION, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=specialisation_keyboard(tg_id),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_SPECIALISATION')
        return STEP_SPECIALISATION


def choose_schedule(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if update.callback_query.data == 'back_cv':
        if user['cv']['speciality'] == '–í—Ä–∞—á':
            text = get_step_text(STEP_SPECIALISATION, tg_id)[0]
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=specialisation_keyboard(tg_id),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_SPECIALISATION')
            return STEP_SPECIALISATION
        else:
            text = get_step_text(STEP_SPECIALITY, tg_id)[0]
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=speciality_keyboard(),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_SPECIALITY')
            return STEP_SPECIALITY
    user_schedule = update.callback_query.data
    tg_id = update.effective_user.id
    dbase.save_cv(tg_id, 'schedule', user_schedule)
    if firsttime_user(tg_id, 'cv'):
        text = get_step_text(STEP_LOCATION, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=back_keyboard(),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_LOCATION')
        return STEP_LOCATION
    else:
        print_cv_info(update, context, cv_other_keyboard(update, context))
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        return STEP_UPDATE_CV

def choose_location(update, context):
    user_location = update.message.text
    tg_id = update.effective_user.id
    if update_user_location(user_location):
        user_location = update_user_location(user_location)
        station_numbers = make_station_numbers_set(user_location)
        dbase.save_cv(tg_id, 'location', user_location)
        dbase.save_cv(tg_id, 'station_numbers', station_numbers)
        if firsttime_user(tg_id, 'cv'):
            text = get_step_text(STEP_SALARY, tg_id)[0]
            update.message.reply_text(
                text=text,
                reply_markup=salary_keyboard(tg_id),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_SALARY')
            return STEP_SALARY
        else:
            print_cv_info(update, context, cv_other_keyboard(update, context), callback=False)
            dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
            return STEP_UPDATE_CV
    else:
        update.message.reply_text('–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        dbase.save_cv(tg_id, 'current_step', 'STEP_LOCATION')
        return STEP_LOCATION

def location_back(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    text = get_step_text(STEP_SCHEDULE, tg_id)[0]
    update.callback_query.edit_message_text(
        text=text,
        reply_markup=schedule_keyboard(tg_id),
        parse_mode=ParseMode.HTML
    )
    dbase.save_cv(tg_id, 'current_step', 'STEP_SCHEDULE')
    return STEP_SCHEDULE


def choose_salary(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    if update.callback_query.data == 'back_cv':
        text = get_step_text(STEP_LOCATION, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=back_keyboard(),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_LOCATION')
        return STEP_LOCATION
    user_data = update.callback_query.data
    user_salary = user_data.split('/')[0]
    user_salary_key = user_data.split('/')[1]
    dbase.save_cv(tg_id, 'salary', user_salary)
    dbase.save_cv(tg_id, 'salary_key', user_salary_key)
    if firsttime_user(tg_id, 'cv'):
        text = get_step_text(STEP_NAME, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=back_keyboard(),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_NAME')
        return STEP_NAME
    else:
        print_cv_info(update, context, cv_other_keyboard(update, context))
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        return STEP_UPDATE_CV

def choose_name(update, context):
    user_name = update.message.text
    tg_id = update.effective_user.id
    if len(user_name.split()) < 2:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û(–Ω–µ –º–µ–Ω–µ–µ 2-—Ö —Å–ª–æ–≤)')
        dbase.save_cv(tg_id, 'current_step', 'STEP_NAME')
        return STEP_NAME
    else:
        dbase.save_cv(tg_id, 'name', user_name)
    if firsttime_user(update.effective_user.id, 'cv'):
        text = get_step_text(STEP_AGE, tg_id)[0]
        update.message.reply_text(
            text=text,
            reply_markup=back_keyboard(),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_AGE')
        return STEP_AGE
    else:
        print_cv_info(update, context, cv_other_keyboard(update, context), callback=False)
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        return STEP_UPDATE_CV

def name_back(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    text = get_step_text(STEP_SALARY, tg_id)[0]
    update.callback_query.edit_message_text(
        text=text,
        reply_markup=salary_keyboard(tg_id),
        parse_mode=ParseMode.HTML
    )
    dbase.save_cv(tg_id, 'current_step', 'STEP_SALARY')
    return STEP_SALARY


def choose_age(update, context):
    user_age = update.message.text
    tg_id = update.effective_user.id
    try:
        user_age = int(user_age)
        if user_age > 0 and user_age < 100:
            dbase.save_cv(tg_id, 'age', user_age)
            if firsttime_user(update.effective_user.id, 'cv'):
                user = dbase.db_client.users.find_one({'tg_id': tg_id})
                user_speciality = user['cv']['speciality']
                if user_speciality == '–í—Ä–∞—á':
                    text = get_step_text(STEP_EXPERIENCE, tg_id)[0]
                    update.message.reply_text(
                        text=text,
                        reply_markup=experience_keyboard(tg_id),
                        parse_mode=ParseMode.HTML
                    )
                    dbase.save_cv(tg_id, 'current_step', 'STEP_EXPERIENCE')
                    return STEP_EXPERIENCE
                else:
                    text = get_step_text(STEP_EDUCATION, tg_id)[0]
                    update.message.reply_text(
                        text=text,
                        reply_markup=education_keyboard(tg_id),
                        parse_mode=ParseMode.HTML
                    )
                    dbase.save_cv(tg_id, 'current_step', 'STEP_EDUCATION')
                    return STEP_EDUCATION
            else:
                print_cv_info(update, context, cv_other_keyboard(update, context), callback=False)
                dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
                return STEP_UPDATE_CV
        else:
            update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
            dbase.save_cv(tg_id, 'current_step', 'STEP_AGE')
            return STEP_AGE
    except ValueError:
        update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç')
        dbase.save_cv(tg_id, 'current_step', 'STEP_AGE')
        return STEP_AGE

def age_back(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    text = get_step_text(STEP_NAME, tg_id)[0]
    update.callback_query.edit_message_text(
        text=text,
        reply_markup=back_keyboard(),
        parse_mode=ParseMode.HTML
    )
    dbase.save_cv(tg_id, 'current_step', 'STEP_NAME')
    return STEP_NAME


def choose_education(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    if update.callback_query.data == 'back_cv':
        text = get_step_text(STEP_AGE, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=back_keyboard(),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_AGE')
        return STEP_AGE
    user_data = update.callback_query.data
    user_education = user_data.split('/')[0]
    user_education_key = user_data.split('/')[1]
    if user_education == '—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥., –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ':
        user_education = '—Å—Ä–µ–¥–Ω–µ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ, –Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ'
    dbase.save_cv(tg_id, 'education', user_education)
    dbase.save_cv(tg_id, 'education_key', user_education_key)
    if firsttime_user(tg_id, 'cv'):
        text = get_step_text(STEP_EXPERIENCE, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=experience_keyboard(tg_id),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_EXPERIENCE')
        return STEP_EXPERIENCE
    else:
        print_cv_info(update, context, cv_other_keyboard(update, context))
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        return STEP_UPDATE_CV

def choose_experience(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if update.callback_query.data == 'back_cv':
        if user['cv']['speciality'] == '–í—Ä–∞—á':
            text = get_step_text(STEP_AGE, tg_id)[0]
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=back_keyboard(),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_AGE')
            return STEP_AGE
        else:
            text = get_step_text(STEP_EDUCATION, tg_id)[0]
            update.callback_query.edit_message_text(
                text=text,
                reply_markup=education_keyboard(tg_id),
                parse_mode=ParseMode.HTML
            )
            dbase.save_cv(tg_id, 'current_step', 'STEP_EDUCATION')
            return STEP_EDUCATION
    user_data = update.callback_query.data
    user_experience = user_data.split('/')[0]
    user_experience_key = user_data.split('/')[1]
    if user_experience == '–ó–≤–µ–∑–¥–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç':
        user_experience = '–≤—ã–ø—É—Å–∫–Ω–∏–∫ –∫—É—Ä—Å–∞ "–ó–≤–µ–∑–¥–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"'
    dbase.save_cv(tg_id, 'experience', user_experience)
    dbase.save_cv(tg_id, 'experience_key', user_experience_key)
    if firsttime_user(tg_id, 'cv'):
        text = get_step_text(STEP_PHOTO, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=photo_pass_keyboard(tg_id),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_PHOTO')
        return STEP_PHOTO
    else:
        print_cv_info(update, context, cv_other_keyboard(update, context))
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        return STEP_UPDATE_CV

def check_user_photo(update, context):
    tg_id = update.effective_user.id
    update.message.reply_text('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
    photo_path_list = []
    for id, photo in enumerate(update.message.photo[::-1]):
        user_photo = context.bot.getFile(photo.file_id)
        photo_path = make_photo_path(id, user_photo, 'downloads', update, context)
        photo_path_list.append(photo_path)

    if is_human_and_sfw(photo_path_list[0]):
        update.message.reply_text('–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
        if os.path.exists(path=f'images/{tg_id}'):
            files = os.listdir(path=f'images/{tg_id}')
            if files:
                for file in files:
                    os.remove(f'images/{tg_id}/{file}')
        for id, photo in enumerate(update.message.photo):
            user_photo = context.bot.getFile(photo.file_id)
            photo_path = make_photo_path(id, user_photo, 'images', update, context)
            os.rename(photo_path_list[id], photo_path)
            photo_path_list[id] = photo_path
        files = os.listdir(path='downloads')
        for file in files:
            os.remove(f'downloads/{file}')
        dbase.save_cv(tg_id, 'photo', photo_path_list)
        dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
        if firsttime_user(tg_id, 'cv'):
            print_cv_info(update, context, cv_main_keyboard(update, context), callback=False)
        else:
            print_cv_info(update, context, cv_other_keyboard(update, context), callback=False)
        return STEP_UPDATE_CV
    else:
        update.message.reply_text('–§–æ—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–∏–¥—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ', reply_markup=photo_pass_keyboard(tg_id))
        dbase.save_cv(tg_id, 'current_step', 'STEP_PHOTO')
        return STEP_PHOTO

def photo_pass(update, context):
    update.callback_query.answer()
    tg_id = update.effective_user.id
    if update.callback_query.data == 'back_cv':
        text = get_step_text(STEP_EXPERIENCE, tg_id)[0]
        update.callback_query.edit_message_text(
            text=text,
            reply_markup=experience_keyboard(tg_id),
            parse_mode=ParseMode.HTML
        )
        dbase.save_cv(tg_id, 'current_step', 'STEP_EXPERIENCE')
        return STEP_EXPERIENCE
    user_photo = False
    dbase.save_cv(tg_id, 'photo', user_photo)
    print_cv_info(update, context, cv_main_keyboard(update, context))
    dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
    return STEP_UPDATE_CV


def show_photo(update, context):
    tg_id = update.effective_user.id
    user = dbase.db_client.users.find_one({'tg_id': tg_id})
    if user['cv'].get('photo'):
        filename = str(tg_id) + '_0_'
        files = os.listdir(path=f'images/{tg_id}')
        for file in files:
            if filename in file:
                photo = os.path.join('images', f'{tg_id}', file)
                chat_id = update.effective_chat.id
                context.bot.send_photo(chat_id=chat_id, photo=open(photo, 'rb'))
    print_cv_info(update, context, cv_main_keyboard(update, context), callback=False)
    return STEP_UPDATE_CV


# –§—É–Ω–∫—Ü–∏—è –¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–Ω–∫–µ—Ç–µ –Ω–µ –≤—ã–±—Ä–∞–ª –ø–æ–ª–µ
def cv_fallback(update, context):
    tg_id = update.effective_user.id
    print_cv_info(update, context, cv_main_keyboard(update, context), callback=False)
    dbase.save_cv(tg_id, 'current_step', 'STEP_UPDATE_CV')
    return STEP_UPDATE_CV


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –≤—ã—Ö–æ–¥ –∏–∑ ConversationHandler
def end_describing_cv(update, context):
    text = '–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.'
    update.callback_query.answer()
    update.callback_query.edit_message_text(
        text=text,
        reply_markup=start_keyboard(),
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

cv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(cv_start, pattern='^' + '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É' + '$')
    ],
    states={
        STEP_SPECIALITY: [CallbackQueryHandler(choose_speciality)],
        STEP_SPECIALISATION: [CallbackQueryHandler(choose_specialisation)],
        STEP_SCHEDULE: [CallbackQueryHandler(choose_schedule)],
        STEP_LOCATION: [
            MessageHandler(Filters.text, choose_location),
            CallbackQueryHandler(location_back),
        ],
        STEP_SALARY: [CallbackQueryHandler(choose_salary)],
        STEP_NAME: [
            MessageHandler(Filters.text, choose_name),
            CallbackQueryHandler(name_back),
        ],
        STEP_AGE: [
            MessageHandler(Filters.text, choose_age),
            CallbackQueryHandler(age_back),
        ],
        STEP_EDUCATION: [CallbackQueryHandler(choose_education)],
        STEP_EXPERIENCE: [CallbackQueryHandler(choose_experience)],
        STEP_PHOTO: [
            MessageHandler(Filters.photo, check_user_photo),
            CallbackQueryHandler(photo_pass, pattern='^back_cv$|^–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å_—Ñ–æ—Ç–æ$'),
        ],
        STEP_UPDATE_CV: [
            CallbackQueryHandler(manage_choosen_button, pattern=input_patterns),
            CallbackQueryHandler(cv_move_other, pattern='^' + str(STEP_OTHER) + '$'),
            CallbackQueryHandler(not_show_cv, pattern='^' + str(STEP_DELETE) + '$'),
            CallbackQueryHandler(cv_start, pattern='^' + str(STEP_BACK) + '$'),
            CommandHandler('photo', show_photo),
        ],
    },
    fallbacks=[
        MessageHandler(Filters.text | Filters.photo | Filters.video, cv_fallback),
        CallbackQueryHandler(end_describing_cv, pattern='^' + str(END) + '$'),
        CommandHandler('start', start),
    ],
    allow_reentry=True
)
